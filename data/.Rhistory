df <- df[!grepl("nm", df$Name),]
df$Name[df$Name == "pta"] <- "Pta"
df$Name[df$Name == "ptada"] <- "PtaDA"
df$Name[df$Name == "pa"] <- "Pa"
df$Name[df$Name == "pa20"] <- "Pa20"
df$AUC <- log10(df$AUC)
df$plate <- factor(as.character(df$plate), levels = as.character(1:length(unique(df$plate))))
df$batch <- factor(as.character(df$batch), levels = as.character(1:4), labels = c("Batch_1", "Batch_2", "Batch_3", "Batch_4") )
#make it so pta is first
df$Name <- factor(as.character(df$Name))
df$Name <- relevel(df$Name, "Pta")
return(df)
}
#ROS
csv_part <- get_files_from_directories(first_path_ros, new_path_ros, alan_path, china_path)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
data_ros <- get_data_frame_rdy_4_plting(data_ros)
sum(data_ros$Name == "447")
#SGI pre-china
full <- gather(full, "plate_col", "gramsdtenthousand", W1:W8, na.rm = T)
full$gramsdtenthousand <- full$gramsdtenthousand/10
#SGI CH-apeptide peptides
full_sgi <- read.csv("/Users/nicholascolaianni/Documents/dangl_lab/sgi_data/china_peptides_sgi.csv")
full_sgi <- gather(full_sgi, "plate_col", "mg", A:H, na.rm = T)
full_sgi$mg <- full_sgi$mg/10
colnames(full_sgi) <- c("ID", "Plate", "Exp","Plant","plate_col", "gramsdtenthousand")
full_sgi <- rbind(full_sgi[,c(1,2,3,4,6)], full[,c(1,2,3,4,6)])
full_sgi$plate_exp <- paste(full_sgi$Plate, full_sgi$Exp, sep = "_")
#have to fix all the different spellings
full_sgi$ID <- as.character(full_sgi$ID)
full_sgi$ID[full_sgi$ID == "Mock"] <- "mock"
full_sgi$ID[full_sgi$ID == "Mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "flg22 "] <- "Flg22"
full_sgi$ID[full_sgi$ID == "flg22"] <- "Flg22"
full_sgi$ID[full_sgi$ID == "pa"] <- "Pa"
full_sgi$ID[full_sgi$ID == "pa20"] <- "Pa20"
full_sgi$ID[full_sgi$ID == "pta"] <- "Pta"
full_sgi$ID[full_sgi$ID == "PtaDa"] <- "PtaDA"
#change 2609 to 2005
full_sgi$ID[full_sgi$ID == "2609"] <- "2005"
full_sgi$ID <- factor(full_sgi$ID)
#full_sgi$plate_exp <- factor(full_sgi$plate_exp)
full_sgi$Exp <- factor(full_sgi$Exp)
levels(full_sgi$Plant)
colo_sgi <- full_sgi[full_sgi$Plant %in% c("Col", "colo"),]
ggplot(na.omit(colo_sgi[colo_sgi$ID == "mock",]), aes(Exp, gramsdtenthousand, color=plate_exp))+
geom_boxplot(outlier.shape = NA)
sum(data_ros$Name == "447")
#ROS
csv_part <- get_files_from_directories(first_path_ros, new_path_ros, alan_path, china_path)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
data_ros <- get_data_frame_rdy_4_plting(data_ros)
#SGI pre-china
full <- gather(full, "plate_col", "gramsdtenthousand", W1:W8, na.rm = T)
full$gramsdtenthousand <- full$gramsdtenthousand/10
#SGI CH-apeptide peptides
full_sgi <- read.csv("/Users/nicholascolaianni/Documents/dangl_lab/sgi_data/china_peptides_sgi.csv")
full_sgi <- gather(full_sgi, "plate_col", "mg", A:H, na.rm = T)
full_sgi$mg <- full_sgi$mg/10
colnames(full_sgi) <- c("ID", "Plate", "Exp","Plant","plate_col", "gramsdtenthousand")
full_sgi <- rbind(full_sgi[,c(1,2,3,4,6)], full[,c(1,2,3,4,6)])
full_sgi$plate_exp <- paste(full_sgi$Plate, full_sgi$Exp, sep = "_")
#have to fix all the different spellings
full_sgi$ID <- as.character(full_sgi$ID)
full_sgi$ID[full_sgi$ID == "Mock"] <- "mock"
full_sgi$ID[full_sgi$ID == "Mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "flg22 "] <- "Flg22"
full_sgi$ID[full_sgi$ID == "flg22"] <- "Flg22"
full_sgi$ID[full_sgi$ID == "pa"] <- "Pa"
full_sgi$ID[full_sgi$ID == "pa20"] <- "Pa20"
full_sgi$ID[full_sgi$ID == "pta"] <- "Pta"
full_sgi$ID[full_sgi$ID == "PtaDa"] <- "PtaDA"
#change 2609 to 2005
full_sgi$ID[full_sgi$ID == "2609"] <- "2005"
full_sgi$ID <- factor(full_sgi$ID)
#full_sgi$plate_exp <- factor(full_sgi$plate_exp)
full_sgi$Exp <- factor(full_sgi$Exp)
levels(full_sgi$Plant)
colo_sgi <- full_sgi[full_sgi$Plant %in% c("Col", "colo"),]
ggplot(na.omit(colo_sgi[colo_sgi$ID == "mock",]), aes(Exp, gramsdtenthousand, color=plate_exp))+
geom_boxplot(outlier.shape = NA)
#turn all the data to z-scores
for ( i in unique(colo_sgi$plate_exp ) ) {
colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] <- (colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] - mean(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T))/sd(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T)
}
ggplot(na.omit(colo_sgi[colo_sgi$ID == "mock",]), aes(Exp, gramsdtenthousand, color=plate_exp))+
geom_boxplot(outlier.shape = NA)
#relevel
colo_sgi$ID <- relevel(colo_sgi$ID, ref = "mock")
#Model I am using to call significance
less_rand <- lmer(gramsdtenthousand ~ ID + Exp + (1|plate_exp), data = colo_sgi)
summary(less_rand)
ptada_means_std <- c() #THIS IS ACTAULLY MEDIAN******
for ( i in 1:nlevels(data_ros$plate) ) {
ptada_means_std <- append(ptada_means_std, c(i, mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])))
}
ptada_means_std <- as.data.frame(matrix(ptada_means_std, ncol = 3, byrow = T))
z_scores_per_peptide <- c()
for ( i in ptada_means_std[,1] ) {
for ( j in unique(data_ros$Name[data_ros$plate == i]) ) {
z_scores_per_peptide <- append(z_scores_per_peptide, c(j, (mean(data_ros$AUC[data_ros$Name == j & data_ros$plate == i ]) - ptada_means_std$V2[i])/ptada_means_std$V3[i] ) )
}
}
z_scores_per_peptide <- as.data.frame(matrix(z_scores_per_peptide, ncol = 2, byrow = T), stringsAsFactors = F)
z_scores_per_peptide$V2 <- as.numeric(z_scores_per_peptide$V2)
order_names <- reorder(z_scores_per_peptide$V1,-z_scores_per_peptide$V2, median)
#plot the results
t <- summary(less_rand)
s <- as.data.frame( t$coefficients )
colnames(s)[2] <- "StdE"
s_inter <- s[1,]
s <- s[2:(nrow(s)-7),]
row.names(s) <- gsub("ID","", row.names(s))
names_in_sgi <- levels(order_names)[levels(order_names) %in% row.names(s)]
s <- s[row.names(s)[match(names_in_sgi, row.names(s))],]
s$`Pr(>|t|)` <- p.adjust(s$`Pr(>|t|)`, method = "fdr")
s_high <- s[s$`Pr(>|t|)` < .001,]
s_med <- s[s$`Pr(>|t|)` < .01 & s$`Pr(>|t|)` > .001,]
s_low <- s[s$`Pr(>|t|)` < .05 & s$`Pr(>|t|)` > .01,]
#raw data with code
colo_sgi$ID <- as.character(colo_sgi$ID)
colo_sgi$ID[colo_sgi$ID == "flg22"] <- "Pta"
colo_sgi$ID <- factor(colo_sgi$ID, levels=c(row.names(s),"mock"))
#Final Plot
p <- ggplot(na.omit(colo_sgi), aes(x=ID, y=gramsdtenthousand))+
geom_point(color="grey") +
#geom_jitter(aes(fill=Plate))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.5),
plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=14))+
#ylim(-25,40)+
geom_text(data = s_med, aes(row.names(s_med), y=10), label = "**", vjust=-1.5, inherit.aes = F)+
geom_text(data = s_high, aes(row.names(s_high), y=11), label = "***", vjust=-1.5,inherit.aes = F)+
#  geom_text(data = s_low, aes(row.names(s_low),y=9), label = "*", vjust =-1.5,inherit.aes = F)+
ylab("Mock Centered Fresh Weight (mg)") +
xlab("Peptide ID")
p <- p + geom_errorbar(data=s, aes(x=factor(row.names(s), levels=row.names(s)), y=Estimate, ymin=Estimate-StdE, ymax=Estimate+StdE))
p
order_names <- reorder(z_scores_per_peptide$V1,-z_scores_per_peptide$V2, median)
#plot the results
t <- summary(less_rand)
s <- as.data.frame( t$coefficients )
colnames(s)[2] <- "StdE"
s_inter <- s[1,]
s <- s[2:(nrow(s)-7),]
row.names(s) <- gsub("ID","", row.names(s))
names_in_sgi <- levels(order_names)[levels(order_names) %in% row.names(s)]
s <- s[row.names(s)[match(names_in_sgi, row.names(s))],]
s$`Pr(>|t|)` <- p.adjust(s$`Pr(>|t|)`, method = "fdr")
s_high <- s[s$`Pr(>|t|)` < .001,]
s_med <- s[s$`Pr(>|t|)` < .01 & s$`Pr(>|t|)` > .001,]
s_low <- s[s$`Pr(>|t|)` < .05 & s$`Pr(>|t|)` > .01,]
#raw data with code
colo_sgi$ID <- as.character(colo_sgi$ID)
colo_sgi$ID[colo_sgi$ID == "flg22"] <- "Pta"
colo_sgi$ID <- factor(colo_sgi$ID, levels=c(row.names(s),"mock"))
#Final Plot
p <- ggplot(na.omit(colo_sgi), aes(x=ID, y=gramsdtenthousand))+
geom_point(color="grey") +
#geom_jitter(aes(fill=Plate))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.5),
plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=14))+
#ylim(-25,40)+
geom_text(data = s_med, aes(row.names(s_med), y=10), label = "**", vjust=-1.5, inherit.aes = F)+
geom_text(data = s_high, aes(row.names(s_high), y=11), label = "***", vjust=-1.5,inherit.aes = F)+
#  geom_text(data = s_low, aes(row.names(s_low),y=9), label = "*", vjust =-1.5,inherit.aes = F)+
ylab("Mock Centered Fresh Weight (mg)") +
xlab("Peptide ID")
p <- p + geom_errorbar(data=s, aes(x=factor(row.names(s), levels=row.names(s)), y=Estimate, ymin=Estimate-StdE, ymax=Estimate+StdE))
p
#ROS
csv_part <- get_files_from_directories(first_path_ros, new_path_ros, alan_path, china_path)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
data_ros <- get_data_frame_rdy_4_plting(data_ros)
#SGI pre-china
full <- gather(full, "plate_col", "gramsdtenthousand", W1:W8, na.rm = T)
full$gramsdtenthousand <- full$gramsdtenthousand/10
#SGI CH-apeptide peptides
full_sgi <- read.csv("/Users/nicholascolaianni/Documents/dangl_lab/sgi_data/china_peptides_sgi.csv")
full_sgi <- gather(full_sgi, "plate_col", "mg", A:H, na.rm = T)
full_sgi$mg <- full_sgi$mg/10
colnames(full_sgi) <- c("ID", "Plate", "Exp","Plant","plate_col", "gramsdtenthousand")
full_sgi <- rbind(full_sgi[,c(1,2,3,4,6)], full[,c(1,2,3,4,6)])
full_sgi$plate_exp <- paste(full_sgi$Plate, full_sgi$Exp, sep = "_")
#have to fix all the different spellings
full_sgi$ID <- as.character(full_sgi$ID)
full_sgi$ID[full_sgi$ID == "Mock"] <- "mock"
full_sgi$ID[full_sgi$ID == "Mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "flg22 "] <- "Flg22"
full_sgi$ID[full_sgi$ID == "flg22"] <- "Flg22"
full_sgi$ID[full_sgi$ID == "pa"] <- "Pa"
full_sgi$ID[full_sgi$ID == "pa20"] <- "Pa20"
full_sgi$ID[full_sgi$ID == "pta"] <- "Pta"
full_sgi$ID[full_sgi$ID == "PtaDa"] <- "PtaDA"
#change 2609 to 2005
full_sgi$ID[full_sgi$ID == "2609"] <- "2005"
full_sgi$ID <- factor(full_sgi$ID)
#full_sgi$plate_exp <- factor(full_sgi$plate_exp)
full_sgi$Exp <- factor(full_sgi$Exp)
levels(full_sgi$Plant)
colo_sgi <- full_sgi[full_sgi$Plant %in% c("Col", "colo"),]
#turn all the data to z-scores
for ( i in unique(colo_sgi$plate_exp ) ) {
colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] <- (colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] - mean(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T))/sd(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T)
}
ggplot(na.omit(colo_sgi[colo_sgi$ID == "mock",]), aes(Exp, gramsdtenthousand, color=plate_exp))+
geom_boxplot(outlier.shape = NA)
#relevel
colo_sgi$ID <- relevel(colo_sgi$ID, ref = "mock")
#Model I am using to call significance
less_rand <- lmer(gramsdtenthousand ~ ID + Exp + (1|plate_exp), data = colo_sgi)
ptada_means_std <- c() #THIS IS ACTAULLY MEDIAN******
for ( i in 1:nlevels(data_ros$plate) ) {
ptada_means_std <- append(ptada_means_std, c(i, mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])))
}
ptada_means_std <- as.data.frame(matrix(ptada_means_std, ncol = 3, byrow = T))
z_scores_per_peptide <- c()
for ( i in ptada_means_std[,1] ) {
for ( j in unique(data_ros$Name[data_ros$plate == i]) ) {
z_scores_per_peptide <- append(z_scores_per_peptide, c(j, (mean(data_ros$AUC[data_ros$Name == j & data_ros$plate == i ]) - ptada_means_std$V2[i])/ptada_means_std$V3[i] ) )
}
}
z_scores_per_peptide <- as.data.frame(matrix(z_scores_per_peptide, ncol = 2, byrow = T), stringsAsFactors = F)
z_scores_per_peptide$V2 <- as.numeric(z_scores_per_peptide$V2)
order_names <- reorder(z_scores_per_peptide$V1,-z_scores_per_peptide$V2, median)
order_names
get_data_frame_rdy_4_plting <- function(df) {
#before plotting I need to combine the 236 samples, which were run on the same plate
df$Name[df$Name == "236_a"] <- "236"
#get rid of D13
df <- df[df$Name != "D13",]
#get rid of distilled water samples
df <- df[df$Name != "DW" & df$Name != "dw",]
#get rid of ladder samples
df <- df[!grepl("nm", df$Name),]
df$Name[df$Name == "1447"] <- "447"
df <- na.omit(df)
df$Name[df$Name == "pta"] <- "Pta"
df$Name[df$Name == "ptada"] <- "PtaDA"
df$Name[df$Name == "pa"] <- "Pa"
df$Name[df$Name == "pa20"] <- "Pa20"
df$AUC <- log10(df$AUC)
df$plate <- factor(as.character(df$plate), levels = as.character(1:length(unique(df$plate))))
df$batch <- factor(as.character(df$batch), levels = as.character(1:4), labels = c("Batch_1", "Batch_2", "Batch_3", "Batch_4") )
#make it so pta is first
df$Name <- factor(as.character(df$Name))
df$Name <- relevel(df$Name, "Pta")
return(df)
}
#ROS
csv_part <- get_files_from_directories(first_path_ros, new_path_ros, alan_path, china_path)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
data_ros <- get_data_frame_rdy_4_plting(data_ros)
#SGI pre-china
full <- gather(full, "plate_col", "gramsdtenthousand", W1:W8, na.rm = T)
full$gramsdtenthousand <- full$gramsdtenthousand/10
#SGI CH-apeptide peptides
full_sgi <- read.csv("/Users/nicholascolaianni/Documents/dangl_lab/sgi_data/china_peptides_sgi.csv")
full_sgi <- gather(full_sgi, "plate_col", "mg", A:H, na.rm = T)
full_sgi$mg <- full_sgi$mg/10
colnames(full_sgi) <- c("ID", "Plate", "Exp","Plant","plate_col", "gramsdtenthousand")
full_sgi <- rbind(full_sgi[,c(1,2,3,4,6)], full[,c(1,2,3,4,6)])
full_sgi$plate_exp <- paste(full_sgi$Plate, full_sgi$Exp, sep = "_")
#have to fix all the different spellings
full_sgi$ID <- as.character(full_sgi$ID)
full_sgi$ID[full_sgi$ID == "Mock"] <- "mock"
full_sgi$ID[full_sgi$ID == "Mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "flg22 "] <- "Flg22"
full_sgi$ID[full_sgi$ID == "flg22"] <- "Flg22"
full_sgi$ID[full_sgi$ID == "pa"] <- "Pa"
full_sgi$ID[full_sgi$ID == "pa20"] <- "Pa20"
full_sgi$ID[full_sgi$ID == "pta"] <- "Pta"
full_sgi$ID[full_sgi$ID == "PtaDa"] <- "PtaDA"
#change 2609 to 2005
full_sgi$ID[full_sgi$ID == "2609"] <- "2005"
full_sgi$ID <- factor(full_sgi$ID)
#full_sgi$plate_exp <- factor(full_sgi$plate_exp)
full_sgi$Exp <- factor(full_sgi$Exp)
levels(full_sgi$Plant)
colo_sgi <- full_sgi[full_sgi$Plant %in% c("Col", "colo"),]
ggplot(na.omit(colo_sgi[colo_sgi$ID == "mock",]), aes(Exp, gramsdtenthousand, color=plate_exp))+
geom_boxplot(outlier.shape = NA)
#turn all the data to z-scores
for ( i in unique(colo_sgi$plate_exp ) ) {
colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] <- (colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] - mean(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T))/sd(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T)
}
ggplot(na.omit(colo_sgi[colo_sgi$ID == "mock",]), aes(Exp, gramsdtenthousand, color=plate_exp))+
geom_boxplot(outlier.shape = NA)
View(colo_sgi)
#relevel
colo_sgi$ID <- relevel(colo_sgi$ID, ref = "mock")
#Model I am using to call significance
less_rand <- lmer(gramsdtenthousand ~ ID + Exp + (1|plate_exp), data = colo_sgi)
summary(less_rand)
ptada_means_std <- c() #THIS IS ACTAULLY MEDIAN******
for ( i in 1:nlevels(data_ros$plate) ) {
ptada_means_std <- append(ptada_means_std, c(i, mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])))
}
ptada_means_std <- as.data.frame(matrix(ptada_means_std, ncol = 3, byrow = T))
z_scores_per_peptide <- c()
for ( i in ptada_means_std[,1] ) {
for ( j in unique(data_ros$Name[data_ros$plate == i]) ) {
z_scores_per_peptide <- append(z_scores_per_peptide, c(j, (mean(data_ros$AUC[data_ros$Name == j & data_ros$plate == i ]) - ptada_means_std$V2[i])/ptada_means_std$V3[i] ) )
}
}
z_scores_per_peptide <- as.data.frame(matrix(z_scores_per_peptide, ncol = 2, byrow = T), stringsAsFactors = F)
z_scores_per_peptide$V2 <- as.numeric(z_scores_per_peptide$V2)
order_names <- reorder(z_scores_per_peptide$V1,-z_scores_per_peptide$V2, median)
#plot the results
t <- summary(less_rand)
s <- as.data.frame( t$coefficients )
colnames(s)[2] <- "StdE"
s_inter <- s[1,]
s <- s[2:(nrow(s)-7),]
row.names(s) <- gsub("ID","", row.names(s))
names_in_sgi <- levels(order_names)[levels(order_names) %in% row.names(s)]
s <- s[row.names(s)[match(names_in_sgi, row.names(s))],]
s$`Pr(>|t|)` <- p.adjust(s$`Pr(>|t|)`, method = "fdr")
s_high <- s[s$`Pr(>|t|)` < .001,]
s_med <- s[s$`Pr(>|t|)` < .01 & s$`Pr(>|t|)` > .001,]
s_low <- s[s$`Pr(>|t|)` < .05 & s$`Pr(>|t|)` > .01,]
#raw data with code
colo_sgi$ID <- as.character(colo_sgi$ID)
colo_sgi$ID[colo_sgi$ID == "flg22"] <- "Pta"
colo_sgi$ID <- factor(colo_sgi$ID, levels=c(row.names(s),"mock"))
#Final Plot
p <- ggplot(na.omit(colo_sgi), aes(x=ID, y=gramsdtenthousand))+
geom_point(color="grey") +
#geom_jitter(aes(fill=Plate))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.5),
plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=14))+
#ylim(-25,40)+
geom_text(data = s_med, aes(row.names(s_med), y=10), label = "**", vjust=-1.5, inherit.aes = F)+
geom_text(data = s_high, aes(row.names(s_high), y=11), label = "***", vjust=-1.5,inherit.aes = F)+
#  geom_text(data = s_low, aes(row.names(s_low),y=9), label = "*", vjust =-1.5,inherit.aes = F)+
ylab("Mock Centered Fresh Weight (mg)") +
xlab("Peptide ID")
p <- p + geom_errorbar(data=s, aes(x=factor(row.names(s), levels=row.names(s)), y=Estimate, ymin=Estimate-StdE, ymax=Estimate+StdE))
p
-z_scores_per_peptide$V2
reorder(z_scores_per_peptide$V1,-z_scores_per_peptide$V2, median)
?reorder
order_names <- reorder(na.omit(z_scores_per_peptide$V1),-z_scores_per_peptide$V2, median)
z_scores_per_peptide
ptada_means_std <- c() #THIS IS ACTAULLY MEDIAN******
for ( i in 1:nlevels(data_ros$plate) ) {
ptada_means_std <- append(ptada_means_std, c(i, mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])))
}
ptada_means_std <- as.data.frame(matrix(ptada_means_std, ncol = 3, byrow = T))
ptada_means_std <- c() #THIS IS ACTAULLY MEDIAN******
for ( i in 1:levels(data_ros$plate) ) {
ptada_means_std <- append(ptada_means_std, c(i, mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])))
}
1:nlevels(data_ros$plate)
data_ros$plate
data_ros$Name == neg_control
mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]))
mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])
mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])
#ROS
csv_part <- get_files_from_directories(first_path_ros, new_path_ros, alan_path, china_path)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
data_ros <- get_data_frame_rdy_4_plting(data_ros)
View(data_ros)
length(csv)
#ROS
csv_part <- get_files_from_directories(first_path_ros, new_path_ros, alan_path, china_path)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
View(data_ros)
data_ros <- get_data_frame_rdy_4_plting(data_ros)
View(data_ros)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
View(data_ros)
get_data_frame_rdy_4_plting <- function(df) {
#before plotting I need to combine the 236 samples, which were run on the same plate
df$Name[df$Name == "236_a"] <- "236"
#get rid of D13
df <- df[df$Name != "D13",]
#get rid of distilled water samples
df <- df[df$Name != "DW" & df$Name != "dw",]
#get rid of ladder samples
df <- df[!grepl("nm", df$Name),]
df$Name[df$Name == "1447"] <- "447"
df <- na.omit(df)
df$Name[df$Name == "pta"] <- "Pta"
df$Name[df$Name == "ptada"] <- "PtaDA"
df$Name[df$Name == "pa"] <- "Pa"
df$Name[df$Name == "pa20"] <- "Pa20"
df$AUC <- log10(df$AUC)
#df$plate <- factor(as.character(df$plate), levels = as.character(1:length(unique(df$plate))))
df$batch <- factor(as.character(df$batch), levels = as.character(1:4), labels = c("Batch_1", "Batch_2", "Batch_3", "Batch_4") )
#make it so pta is first
df$Name <- factor(as.character(df$Name))
df$Name <- relevel(df$Name, "Pta")
return(df)
}
data_ros <- get_data_frame_rdy_4_plting(data_ros)
View(data_ros)
get_data_frame_rdy_4_plting <- function(df) {
#before plotting I need to combine the 236 samples, which were run on the same plate
df$Name[df$Name == "236_a"] <- "236"
#get rid of D13
df <- df[df$Name != "D13",]
#get rid of distilled water samples
df <- df[df$Name != "DW" & df$Name != "dw",]
#get rid of ladder samples
df <- df[!grepl("nm", df$Name),]
df$Name[df$Name == "1447"] <- "447"
df <- na.omit(df)
df$Name[df$Name == "pta"] <- "Pta"
df$Name[df$Name == "ptada"] <- "PtaDA"
df$Name[df$Name == "pa"] <- "Pa"
df$Name[df$Name == "pa20"] <- "Pa20"
df$AUC <- log10(df$AUC)
df$plate <- factor(as.character(df$plate))
df$batch <- factor(as.character(df$batch), levels = as.character(1:4), labels = c("Batch_1", "Batch_2", "Batch_3", "Batch_4") )
#make it so pta is first
df$Name <- factor(as.character(df$Name))
df$Name <- relevel(df$Name, "Pta")
return(df)
}
#ROS
csv_part <- get_files_from_directories(first_path_ros, new_path_ros, alan_path, china_path)
data_ros <- get_the_combined_dataframe(csv_part[[1]], csv_part[[2]])
data_ros <- get_data_frame_rdy_4_plting(data_ros)
View(data_ros)
#SGI pre-china
full <- gather(full, "plate_col", "gramsdtenthousand", W1:W8, na.rm = T)
full$gramsdtenthousand <- full$gramsdtenthousand/10
#SGI CH-apeptide peptides
full_sgi <- read.csv("/Users/nicholascolaianni/Documents/dangl_lab/sgi_data/china_peptides_sgi.csv")
full_sgi <- gather(full_sgi, "plate_col", "mg", A:H, na.rm = T)
full_sgi$mg <- full_sgi$mg/10
colnames(full_sgi) <- c("ID", "Plate", "Exp","Plant","plate_col", "gramsdtenthousand")
full_sgi <- rbind(full_sgi[,c(1,2,3,4,6)], full[,c(1,2,3,4,6)])
full_sgi$plate_exp <- paste(full_sgi$Plate, full_sgi$Exp, sep = "_")
#have to fix all the different spellings
full_sgi$ID <- as.character(full_sgi$ID)
full_sgi$ID[full_sgi$ID == "Mock"] <- "mock"
full_sgi$ID[full_sgi$ID == "Mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "mock "] <- "mock"
full_sgi$ID[full_sgi$ID == "flg22 "] <- "Flg22"
full_sgi$ID[full_sgi$ID == "flg22"] <- "Flg22"
full_sgi$ID[full_sgi$ID == "pa"] <- "Pa"
full_sgi$ID[full_sgi$ID == "pa20"] <- "Pa20"
full_sgi$ID[full_sgi$ID == "pta"] <- "Pta"
full_sgi$ID[full_sgi$ID == "PtaDa"] <- "PtaDA"
#change 2609 to 2005
full_sgi$ID[full_sgi$ID == "2609"] <- "2005"
full_sgi$ID <- factor(full_sgi$ID)
#full_sgi$plate_exp <- factor(full_sgi$plate_exp)
full_sgi$Exp <- factor(full_sgi$Exp)
levels(full_sgi$Plant)
colo_sgi <- full_sgi[full_sgi$Plant %in% c("Col", "colo"),]
#turn all the data to z-scores
for ( i in unique(colo_sgi$plate_exp ) ) {
colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] <- (colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i] - mean(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T))/sd(colo_sgi$gramsdtenthousand[colo_sgi$plate_exp == i & colo_sgi$ID == "mock"], na.rm = T)
}
#relevel
colo_sgi$ID <- relevel(colo_sgi$ID, ref = "mock")
ptada_means_std <- c() #THIS IS ACTAULLY MEDIAN******
for ( i in 1:nlevels(data_ros$plate) ) {
ptada_means_std <- append(ptada_means_std, c(i, mean(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control]), sd(data_ros$AUC[data_ros$plate == i & data_ros$Name == neg_control])))
}
ptada_means_std <- as.data.frame(matrix(ptada_means_std, ncol = 3, byrow = T))
z_scores_per_peptide <- c()
for ( i in ptada_means_std[,1] ) {
for ( j in unique(data_ros$Name[data_ros$plate == i]) ) {
z_scores_per_peptide <- append(z_scores_per_peptide, c(j, (mean(data_ros$AUC[data_ros$Name == j & data_ros$plate == i ]) - ptada_means_std$V2[i])/ptada_means_std$V3[i] ) )
}
}
z_scores_per_peptide <- as.data.frame(matrix(z_scores_per_peptide, ncol = 2, byrow = T), stringsAsFactors = F)
z_scores_per_peptide$V2 <- as.numeric(z_scores_per_peptide$V2)
order_names <- reorder(z_scores_per_peptide$V1,-z_scores_per_peptide$V2, median)
#plot the results
t <- summary(less_rand)
s <- as.data.frame( t$coefficients )
colnames(s)[2] <- "StdE"
s_inter <- s[1,]
s <- s[2:(nrow(s)-7),]
row.names(s) <- gsub("ID","", row.names(s))
names_in_sgi <- levels(order_names)[levels(order_names) %in% row.names(s)]
s <- s[row.names(s)[match(names_in_sgi, row.names(s))],]
s$`Pr(>|t|)` <- p.adjust(s$`Pr(>|t|)`, method = "fdr")
s_high <- s[s$`Pr(>|t|)` < .001,]
s_med <- s[s$`Pr(>|t|)` < .01 & s$`Pr(>|t|)` > .001,]
s_low <- s[s$`Pr(>|t|)` < .05 & s$`Pr(>|t|)` > .01,]
#raw data with code
colo_sgi$ID <- as.character(colo_sgi$ID)
colo_sgi$ID[colo_sgi$ID == "flg22"] <- "Pta"
colo_sgi$ID <- factor(colo_sgi$ID, levels=c(row.names(s),"mock"))
#Final Plot
p <- ggplot(na.omit(colo_sgi), aes(x=ID, y=gramsdtenthousand))+
geom_point(color="grey") +
#geom_jitter(aes(fill=Plate))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.5),
plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=14))+
#ylim(-25,40)+
geom_text(data = s_med, aes(row.names(s_med), y=10), label = "**", vjust=-1.5, inherit.aes = F)+
geom_text(data = s_high, aes(row.names(s_high), y=11), label = "***", vjust=-1.5,inherit.aes = F)+
#  geom_text(data = s_low, aes(row.names(s_low),y=9), label = "*", vjust =-1.5,inherit.aes = F)+
ylab("Mock Centered Fresh Weight (mg)") +
xlab("Peptide ID")
p <- p + geom_errorbar(data=s, aes(x=factor(row.names(s), levels=row.names(s)), y=Estimate, ymin=Estimate-StdE, ymax=Estimate+StdE))
p
